import logging
import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.dispatcher.router import Router
from dotenv import load_dotenv
import time

# Load environment variables
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_BOT_TOKEN")

# Initialize bot and router
bot = Bot(token=TOKEN)
router = Router()

# Example user data structure
users = {}

# –ë–∞–∑–æ–≤–∞ –ø–∞–ø–∫–∞ –¥–ª—è GIF-—Ñ–∞–π–ª—ñ–≤ —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, "images")
DOG_ANIMATION_PATH = os.path.join(BASE_DIR, "images", "dog_level_1_animated_slow.gif")

# –ß–∞—Å–æ–≤–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ –¥–ª—è –µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞ –∫–ª—ñ–∫—ñ–≤
DOUBLE_CLICK_WINDOW = 0.5  # 500 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
ENERGY_RECOVERY_RATE = 10  # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
MAX_ENERGY = 5000

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≥—Ä–∏
def get_main_screen(user_data):
    caption = (
        f"<b>üêï –í–∞—à –ü–µ—Å (–†—ñ–≤–µ–Ω—å {user_data['level']})</b>

"
        f"<b>üîπ –†—ñ–≤–µ–Ω—å:</b> {user_data['level']}
"
        f"<b>üîπ –ï–Ω–µ—Ä–≥—ñ—è:</b> {user_data['energy']} / {MAX_ENERGY}
"
        f"<b>üîπ –ú–æ–Ω–µ—Ç–∏:</b> {user_data['coins']}"
    )

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíè –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ —Å–æ–±–∞–∫—É!", callback_data="touch_dog")],
        [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="open_menu")],
    ])

    return caption, keyboard

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
async def energy_recovery():
    while True:
        await asyncio.sleep(10)
        for user_id in users:
            users[user_id]["energy"] = min(MAX_ENERGY, users[user_id]["energy"] + ENERGY_RECOVERY_RATE)

@router.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in users:
        users[user_id] = {
            "coins": 0,
            "energy": MAX_ENERGY,
            "level": 1,
            "last_click_time": 0
        }

    # –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    caption, keyboard = get_main_screen(users[user_id])
    await message.answer_animation(
        animation=InputFile(DOG_ANIMATION_PATH),
        caption=caption,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "touch_dog")
async def touch_dog(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = users[user_id]
    current_time = time.time()

    if user_data["energy"] <= 0:
        await callback_query.answer("‚ö° –£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è –µ–Ω–µ—Ä–≥—ñ—è!", show_alert=True)
        return

    # –õ–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫—ñ–≤ —ñ –º–æ–Ω–µ—Ç
    coins_to_add = 20 if current_time - user_data["last_click_time"] <= DOUBLE_CLICK_WINDOW else 10
    user_data["coins"] += coins_to_add
    user_data["energy"] -= 10
    user_data["last_click_time"] = current_time

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    if user_data["coins"] >= user_data["level"] * 100:
        user_data["level"] += 1
        await callback_query.answer(f" –í—ñ—Ç–∞—î–º–æ! –í–∏ –¥–æ—Å—è–≥–ª–∏ —Ä—ñ–≤–Ω—è {user_data['level']}!", show_alert=True)

    caption, keyboard = get_main_screen(user_data)
    await callback_query.message.edit_caption(
        caption=caption,
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "open_menu")
async def open_menu(callback_query: CallbackQuery):
    # –ú–µ–Ω—é –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∞–±–æ —ñ–Ω—à–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—Ä–∏", callback_data="back_to_game")]
    ])
    await callback_query.message.edit_text("–ú–µ–Ω—é

–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "back_to_game")
async def back_to_game(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = users[user_id]

    caption, keyboard = get_main_screen(user_data)
    await callback_query.message.edit_caption(
        caption=caption,
        reply_markup=keyboard
    )

async def main():
    dp = Dispatcher()
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
    asyncio.create_task(energy_recovery())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
